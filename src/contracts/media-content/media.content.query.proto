syntax = "proto3";

import "src/contracts/media-content/media.content.common.proto";

option go_package = "content-service/api/contract";

package contracts.media_content;

service QueryMediaContent {
  // List returns all media items ordered by their upload time which matching the given filter criteria
  rpc MediaItems(ListMediaRequest) returns (stream MediaListItem){}
  // View returns a concrete media item for the given id
  rpc MediaItem(Id) returns (MediaItemDetails){}
  // Like returns the detailed information of a concrete like
  rpc Like(Id) returns (LikeDetails){}
  // Likes returns a detailed list of all likes ordered by time given for the specific media item
  rpc Likes(ListLikesRequest) returns (stream LikeDetails){}
  // Comment returns the detailed list of a concrete comment
  rpc Comment(Id) returns (CommentDetails){}
  // Comments returns a detailed list of all comments ordered by time given for the specific media item
  rpc Comments(ListCommentsRequest) returns (stream CommentDetails){}
}

message Paging {
  // an optional anchor token which allows the service to retrieve the next items
  optional string anchor = 1;
  // an optional limit for returned items
  optional uint32 limit = 2;
}

message AnchorInfo {
  // the anchor token which should be given in the query to retrieve the items before the current one (dependent from the given limit)
  string previous = 1;
  // the amount of items before the current one
  uint64 items_before = 2;
  // the anchor token which should be given in the query to retrieve items after the current one
  string next = 3;
  // the amount of items after the current one
  uint64 items_after = 4;
}

message ListCommentsRequest {
  // the unique identifier of the item
  string id = 1;
  // paging parameters
  Paging Paging = 2;
}

message ListLikesRequest {
  // the unique identifier of the item
  string id = 1;
  // paging parameters
  Paging Paging = 2;
}

message ListMediaRequest {
  // the query to retrieve concrete media items
  ContentQuery Query = 1;
  // paging parameters
  Paging Paging = 2;
  // boolean flag indicates if socials should be returned for media items as well
  optional bool return_socials = 3;
}

message ContentQuery {
  // an optional list of tags to filter for specific media content items
  repeated string tags = 1;
  // an optional start date to filter for media content uploaded after the given date
  optional uint64 start_date = 2;
  // an optional end date to filter for media content uploaded before the given date
  optional TimestampUnix end_date = 3;
  // an optional text used via full-text search to filter for specific media content by their descriptions
  optional TimestampUnix search_term = 4;
  // an optional user id to filter for media content of a concrete user
  optional string user_id = 5;
  // an optional filter for visibility of a media content
  optional ItemVisibility visibility = 6;
}

// an enumeration about the different kind of media items the service supports
enum MediaItemKind {
  KIND_UNSPECIFIED = 0;
  KIND_IMAGES = 1;
  KIND_VIDEO = 2;
}

message MediaListItem {
  // the media item itself
  MediaItemDetails item = 1;
  // when requested the socials contains all relevant social media numbers about the item
  optional MediaItemSocials socials = 2;
  // the anchor information if you want to start from this item
  optional AnchorInfo anchor = 3;
}

message MediaItemDetails {
  // the unique identifier of the media item
  string id = 1;
  // the url to access the concrete media on content storage directly - this is usually a temporary link
  string url = 2;
  // the kind of item
  MediaItemKind kind = 3;
  // the content type of the media
  string content_type = 4;
  // the description set by the user while upload
  string description = 5;
  // a list of tags for the given media
  repeated string tags = 6;
  // the user id of the owner
  string owner_id = 7;
  // the thumbnail url
  string thumbnail_url = 8;
  // the timestamp the media was created
  optional TimestampUnix uploaded_at = 9;
  // the timestamp the media was modified
  optional TimestampUnix last_modified_at = 10;
  // the visibility of the media item
  ItemVisibility visibility = 11;
  // the version of the media item
  uint64 Version = 12;

}

message MediaItemSocials {
  // the amount of likes given in total for the corresponding media item
  uint64 likes = 1;
  // a timestamp representing the time the last like was given
  optional TimestampUnix last_like = 2;
  // the amount of comments given in total for the corresponding media item
  uint64 comments = 3;
  // a timestamp representing the time the last comment was given
  optional TimestampUnix last_comment = 4;
}

message CommentDetails {
  // the unique identifier of the comment itself
  string id = 1;
 // the media id the comment is about
  string media_id = 2;
  // the id of the user which creates the comment
  string user_id = 3;
  // the text of the comment
  string text = 4;
  // the timestamp the comment was created
  optional TimestampUnix created_at = 5;
}

message LikeDetails {
  // the unique identifier of the like itself
  string id = 1;
  // the media id the like is for
  string media_id = 2;
  // the id of the user which added the like to media content
  string user_id = 3;
  // the timestamp the like was given
  optional TimestampUnix created_at = 4;
}