// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: src/contracts/media-content/media.content.query.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryMediaContentClient is the client API for QueryMediaContent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryMediaContentClient interface {
	// List returns all media items ordered by their upload time which matching the given filter criteria
	MediaItems(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (QueryMediaContent_MediaItemsClient, error)
	// View returns a concrete media item for the given id
	MediaItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MediaItemDetails, error)
	// Like returns the detailed information of a concrete like
	Like(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LikeDetails, error)
	// Likes returns a detailed list of all likes ordered by time given for the specific media item
	Likes(ctx context.Context, in *ListLikesRequest, opts ...grpc.CallOption) (QueryMediaContent_LikesClient, error)
	// Comment returns the detailed list of a concrete comment
	Comment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CommentDetails, error)
	// Comments returns a detailed list of all comments ordered by time given for the specific media item
	Comments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (QueryMediaContent_CommentsClient, error)
}

type queryMediaContentClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryMediaContentClient(cc grpc.ClientConnInterface) QueryMediaContentClient {
	return &queryMediaContentClient{cc}
}

func (c *queryMediaContentClient) MediaItems(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (QueryMediaContent_MediaItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryMediaContent_ServiceDesc.Streams[0], "/contracts.media_content.QueryMediaContent/MediaItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryMediaContentMediaItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryMediaContent_MediaItemsClient interface {
	Recv() (*MediaListItem, error)
	grpc.ClientStream
}

type queryMediaContentMediaItemsClient struct {
	grpc.ClientStream
}

func (x *queryMediaContentMediaItemsClient) Recv() (*MediaListItem, error) {
	m := new(MediaListItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryMediaContentClient) MediaItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MediaItemDetails, error) {
	out := new(MediaItemDetails)
	err := c.cc.Invoke(ctx, "/contracts.media_content.QueryMediaContent/MediaItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryMediaContentClient) Like(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LikeDetails, error) {
	out := new(LikeDetails)
	err := c.cc.Invoke(ctx, "/contracts.media_content.QueryMediaContent/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryMediaContentClient) Likes(ctx context.Context, in *ListLikesRequest, opts ...grpc.CallOption) (QueryMediaContent_LikesClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryMediaContent_ServiceDesc.Streams[1], "/contracts.media_content.QueryMediaContent/Likes", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryMediaContentLikesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryMediaContent_LikesClient interface {
	Recv() (*LikeDetails, error)
	grpc.ClientStream
}

type queryMediaContentLikesClient struct {
	grpc.ClientStream
}

func (x *queryMediaContentLikesClient) Recv() (*LikeDetails, error) {
	m := new(LikeDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryMediaContentClient) Comment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CommentDetails, error) {
	out := new(CommentDetails)
	err := c.cc.Invoke(ctx, "/contracts.media_content.QueryMediaContent/Comment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryMediaContentClient) Comments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (QueryMediaContent_CommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryMediaContent_ServiceDesc.Streams[2], "/contracts.media_content.QueryMediaContent/Comments", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryMediaContentCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryMediaContent_CommentsClient interface {
	Recv() (*CommentDetails, error)
	grpc.ClientStream
}

type queryMediaContentCommentsClient struct {
	grpc.ClientStream
}

func (x *queryMediaContentCommentsClient) Recv() (*CommentDetails, error) {
	m := new(CommentDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryMediaContentServer is the server API for QueryMediaContent service.
// All implementations must embed UnimplementedQueryMediaContentServer
// for forward compatibility
type QueryMediaContentServer interface {
	// List returns all media items ordered by their upload time which matching the given filter criteria
	MediaItems(*ListMediaRequest, QueryMediaContent_MediaItemsServer) error
	// View returns a concrete media item for the given id
	MediaItem(context.Context, *Id) (*MediaItemDetails, error)
	// Like returns the detailed information of a concrete like
	Like(context.Context, *Id) (*LikeDetails, error)
	// Likes returns a detailed list of all likes ordered by time given for the specific media item
	Likes(*ListLikesRequest, QueryMediaContent_LikesServer) error
	// Comment returns the detailed list of a concrete comment
	Comment(context.Context, *Id) (*CommentDetails, error)
	// Comments returns a detailed list of all comments ordered by time given for the specific media item
	Comments(*ListCommentsRequest, QueryMediaContent_CommentsServer) error
	mustEmbedUnimplementedQueryMediaContentServer()
}

// UnimplementedQueryMediaContentServer must be embedded to have forward compatible implementations.
type UnimplementedQueryMediaContentServer struct {
}

func (UnimplementedQueryMediaContentServer) MediaItems(*ListMediaRequest, QueryMediaContent_MediaItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method MediaItems not implemented")
}
func (UnimplementedQueryMediaContentServer) MediaItem(context.Context, *Id) (*MediaItemDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaItem not implemented")
}
func (UnimplementedQueryMediaContentServer) Like(context.Context, *Id) (*LikeDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedQueryMediaContentServer) Likes(*ListLikesRequest, QueryMediaContent_LikesServer) error {
	return status.Errorf(codes.Unimplemented, "method Likes not implemented")
}
func (UnimplementedQueryMediaContentServer) Comment(context.Context, *Id) (*CommentDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedQueryMediaContentServer) Comments(*ListCommentsRequest, QueryMediaContent_CommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method Comments not implemented")
}
func (UnimplementedQueryMediaContentServer) mustEmbedUnimplementedQueryMediaContentServer() {}

// UnsafeQueryMediaContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryMediaContentServer will
// result in compilation errors.
type UnsafeQueryMediaContentServer interface {
	mustEmbedUnimplementedQueryMediaContentServer()
}

func RegisterQueryMediaContentServer(s grpc.ServiceRegistrar, srv QueryMediaContentServer) {
	s.RegisterService(&QueryMediaContent_ServiceDesc, srv)
}

func _QueryMediaContent_MediaItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMediaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryMediaContentServer).MediaItems(m, &queryMediaContentMediaItemsServer{stream})
}

type QueryMediaContent_MediaItemsServer interface {
	Send(*MediaListItem) error
	grpc.ServerStream
}

type queryMediaContentMediaItemsServer struct {
	grpc.ServerStream
}

func (x *queryMediaContentMediaItemsServer) Send(m *MediaListItem) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryMediaContent_MediaItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryMediaContentServer).MediaItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.QueryMediaContent/MediaItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryMediaContentServer).MediaItem(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryMediaContent_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryMediaContentServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.QueryMediaContent/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryMediaContentServer).Like(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryMediaContent_Likes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListLikesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryMediaContentServer).Likes(m, &queryMediaContentLikesServer{stream})
}

type QueryMediaContent_LikesServer interface {
	Send(*LikeDetails) error
	grpc.ServerStream
}

type queryMediaContentLikesServer struct {
	grpc.ServerStream
}

func (x *queryMediaContentLikesServer) Send(m *LikeDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryMediaContent_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryMediaContentServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.QueryMediaContent/Comment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryMediaContentServer).Comment(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryMediaContent_Comments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCommentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryMediaContentServer).Comments(m, &queryMediaContentCommentsServer{stream})
}

type QueryMediaContent_CommentsServer interface {
	Send(*CommentDetails) error
	grpc.ServerStream
}

type queryMediaContentCommentsServer struct {
	grpc.ServerStream
}

func (x *queryMediaContentCommentsServer) Send(m *CommentDetails) error {
	return x.ServerStream.SendMsg(m)
}

// QueryMediaContent_ServiceDesc is the grpc.ServiceDesc for QueryMediaContent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryMediaContent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contracts.media_content.QueryMediaContent",
	HandlerType: (*QueryMediaContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MediaItem",
			Handler:    _QueryMediaContent_MediaItem_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _QueryMediaContent_Like_Handler,
		},
		{
			MethodName: "Comment",
			Handler:    _QueryMediaContent_Comment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MediaItems",
			Handler:       _QueryMediaContent_MediaItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Likes",
			Handler:       _QueryMediaContent_Likes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Comments",
			Handler:       _QueryMediaContent_Comments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/contracts/media-content/media.content.query.proto",
}
