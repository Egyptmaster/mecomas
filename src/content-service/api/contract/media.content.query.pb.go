// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.2
// source: src/contracts/media-content/media.content.query.proto

package contract

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// an enumeration about the different kind of media items the service supports
type MediaItemKind int32

const (
	MediaItemKind_KIND_UNSPECIFIED MediaItemKind = 0
	MediaItemKind_KIND_IMAGES      MediaItemKind = 1
	MediaItemKind_KIND_VIDEO       MediaItemKind = 2
)

// Enum value maps for MediaItemKind.
var (
	MediaItemKind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_IMAGES",
		2: "KIND_VIDEO",
	}
	MediaItemKind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_IMAGES":      1,
		"KIND_VIDEO":       2,
	}
)

func (x MediaItemKind) Enum() *MediaItemKind {
	p := new(MediaItemKind)
	*p = x
	return p
}

func (x MediaItemKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaItemKind) Descriptor() protoreflect.EnumDescriptor {
	return file_src_contracts_media_content_media_content_query_proto_enumTypes[0].Descriptor()
}

func (MediaItemKind) Type() protoreflect.EnumType {
	return &file_src_contracts_media_content_media_content_query_proto_enumTypes[0]
}

func (x MediaItemKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaItemKind.Descriptor instead.
func (MediaItemKind) EnumDescriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{0}
}

type Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an optional anchor token which allows the service to retrieve the next items
	Anchor *string `protobuf:"bytes,1,opt,name=anchor,proto3,oneof" json:"anchor,omitempty"`
	// an optional limit for returned items
	Limit *uint32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *Paging) Reset() {
	*x = Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paging) ProtoMessage() {}

func (x *Paging) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paging.ProtoReflect.Descriptor instead.
func (*Paging) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{0}
}

func (x *Paging) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *Paging) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type AnchorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the anchor token which should be given in the query to retrieve the items before the current one (dependent from the given limit)
	Previous string `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	// the amount of items before the current one
	ItemsBefore uint64 `protobuf:"varint,2,opt,name=items_before,json=itemsBefore,proto3" json:"items_before,omitempty"`
	// the anchor token which should be given in the query to retrieve items after the current one
	Next string `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
	// the amount of items after the current one
	ItemsAfter uint64 `protobuf:"varint,4,opt,name=items_after,json=itemsAfter,proto3" json:"items_after,omitempty"`
}

func (x *AnchorInfo) Reset() {
	*x = AnchorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorInfo) ProtoMessage() {}

func (x *AnchorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorInfo.ProtoReflect.Descriptor instead.
func (*AnchorInfo) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{1}
}

func (x *AnchorInfo) GetPrevious() string {
	if x != nil {
		return x.Previous
	}
	return ""
}

func (x *AnchorInfo) GetItemsBefore() uint64 {
	if x != nil {
		return x.ItemsBefore
	}
	return 0
}

func (x *AnchorInfo) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *AnchorInfo) GetItemsAfter() uint64 {
	if x != nil {
		return x.ItemsAfter
	}
	return 0
}

type ListCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier of the item
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// paging parameters
	Paging *Paging `protobuf:"bytes,2,opt,name=Paging,proto3" json:"Paging,omitempty"`
}

func (x *ListCommentsRequest) Reset() {
	*x = ListCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsRequest) ProtoMessage() {}

func (x *ListCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsRequest.ProtoReflect.Descriptor instead.
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{2}
}

func (x *ListCommentsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListCommentsRequest) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type ListLikesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier of the item
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// paging parameters
	Paging *Paging `protobuf:"bytes,2,opt,name=Paging,proto3" json:"Paging,omitempty"`
}

func (x *ListLikesRequest) Reset() {
	*x = ListLikesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLikesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLikesRequest) ProtoMessage() {}

func (x *ListLikesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLikesRequest.ProtoReflect.Descriptor instead.
func (*ListLikesRequest) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{3}
}

func (x *ListLikesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListLikesRequest) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type ListMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the query to retrieve concrete media items
	Query *ContentQuery `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	// paging parameters
	Paging *Paging `protobuf:"bytes,2,opt,name=Paging,proto3" json:"Paging,omitempty"`
	// boolean flag indicates if socials should be returned for media items as well
	ReturnSocials *bool `protobuf:"varint,3,opt,name=return_socials,json=returnSocials,proto3,oneof" json:"return_socials,omitempty"`
}

func (x *ListMediaRequest) Reset() {
	*x = ListMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMediaRequest) ProtoMessage() {}

func (x *ListMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMediaRequest.ProtoReflect.Descriptor instead.
func (*ListMediaRequest) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{4}
}

func (x *ListMediaRequest) GetQuery() *ContentQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListMediaRequest) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *ListMediaRequest) GetReturnSocials() bool {
	if x != nil && x.ReturnSocials != nil {
		return *x.ReturnSocials
	}
	return false
}

type ContentQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an optional list of tags to filter for specific media content items
	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	// an optional start date to filter for media content uploaded after the given date
	StartDate *uint64 `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	// an optional end date to filter for media content uploaded before the given date
	EndDate *TimestampUnix `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	// an optional text used via full-text search to filter for specific media content by their descriptions
	SearchTerm *TimestampUnix `protobuf:"bytes,4,opt,name=search_term,json=searchTerm,proto3,oneof" json:"search_term,omitempty"`
	// an optional user id to filter for media content of a concrete user
	UserId *string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// an optional filter for visibility of a media content
	Visibility *ItemVisibility `protobuf:"varint,6,opt,name=visibility,proto3,enum=contracts.media_content.ItemVisibility,oneof" json:"visibility,omitempty"`
}

func (x *ContentQuery) Reset() {
	*x = ContentQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentQuery) ProtoMessage() {}

func (x *ContentQuery) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentQuery.ProtoReflect.Descriptor instead.
func (*ContentQuery) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{5}
}

func (x *ContentQuery) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ContentQuery) GetStartDate() uint64 {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return 0
}

func (x *ContentQuery) GetEndDate() *TimestampUnix {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ContentQuery) GetSearchTerm() *TimestampUnix {
	if x != nil {
		return x.SearchTerm
	}
	return nil
}

func (x *ContentQuery) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContentQuery) GetVisibility() ItemVisibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return ItemVisibility_VISIBILITY_UNSPECIFIED
}

type MediaListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the media item itself
	Item *MediaItemDetails `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// when requested the socials contains all relevant social media numbers about the item
	Socials *MediaItemSocials `protobuf:"bytes,2,opt,name=socials,proto3,oneof" json:"socials,omitempty"`
	// the anchor information if you want to start from this item
	Anchor *AnchorInfo `protobuf:"bytes,3,opt,name=anchor,proto3,oneof" json:"anchor,omitempty"`
}

func (x *MediaListItem) Reset() {
	*x = MediaListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaListItem) ProtoMessage() {}

func (x *MediaListItem) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaListItem.ProtoReflect.Descriptor instead.
func (*MediaListItem) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{6}
}

func (x *MediaListItem) GetItem() *MediaItemDetails {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *MediaListItem) GetSocials() *MediaItemSocials {
	if x != nil {
		return x.Socials
	}
	return nil
}

func (x *MediaListItem) GetAnchor() *AnchorInfo {
	if x != nil {
		return x.Anchor
	}
	return nil
}

type MediaItemDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier of the media item
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the url to access the concrete media on content storage directly - this is usually a temporary link
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// the kind of item
	Kind MediaItemKind `protobuf:"varint,3,opt,name=kind,proto3,enum=contracts.media_content.MediaItemKind" json:"kind,omitempty"`
	// the content type of the media
	ContentType string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// the description set by the user while upload
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// a list of tags for the given media
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// the user id of the owner
	OwnerId string `protobuf:"bytes,7,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// the thumbnail url
	ThumbnailUrl string `protobuf:"bytes,8,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	// the timestamp the media was created
	UploadedAt *TimestampUnix `protobuf:"bytes,9,opt,name=uploaded_at,json=uploadedAt,proto3,oneof" json:"uploaded_at,omitempty"`
	// the timestamp the media was modified
	LastModifiedAt *TimestampUnix `protobuf:"bytes,10,opt,name=last_modified_at,json=lastModifiedAt,proto3,oneof" json:"last_modified_at,omitempty"`
	// the visibility of the media item
	Visibility ItemVisibility `protobuf:"varint,11,opt,name=visibility,proto3,enum=contracts.media_content.ItemVisibility" json:"visibility,omitempty"`
	// the version of the media item
	Version uint64 `protobuf:"varint,12,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *MediaItemDetails) Reset() {
	*x = MediaItemDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaItemDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaItemDetails) ProtoMessage() {}

func (x *MediaItemDetails) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaItemDetails.ProtoReflect.Descriptor instead.
func (*MediaItemDetails) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{7}
}

func (x *MediaItemDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MediaItemDetails) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaItemDetails) GetKind() MediaItemKind {
	if x != nil {
		return x.Kind
	}
	return MediaItemKind_KIND_UNSPECIFIED
}

func (x *MediaItemDetails) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *MediaItemDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MediaItemDetails) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MediaItemDetails) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *MediaItemDetails) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *MediaItemDetails) GetUploadedAt() *TimestampUnix {
	if x != nil {
		return x.UploadedAt
	}
	return nil
}

func (x *MediaItemDetails) GetLastModifiedAt() *TimestampUnix {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

func (x *MediaItemDetails) GetVisibility() ItemVisibility {
	if x != nil {
		return x.Visibility
	}
	return ItemVisibility_VISIBILITY_UNSPECIFIED
}

func (x *MediaItemDetails) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type MediaItemSocials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the amount of likes given in total for the corresponding media item
	Likes uint64 `protobuf:"varint,1,opt,name=likes,proto3" json:"likes,omitempty"`
	// a timestamp representing the time the last like was given
	LastLike *TimestampUnix `protobuf:"bytes,2,opt,name=last_like,json=lastLike,proto3,oneof" json:"last_like,omitempty"`
	// the amount of comments given in total for the corresponding media item
	Comments uint64 `protobuf:"varint,3,opt,name=comments,proto3" json:"comments,omitempty"`
	// a timestamp representing the time the last comment was given
	LastComment *TimestampUnix `protobuf:"bytes,4,opt,name=last_comment,json=lastComment,proto3,oneof" json:"last_comment,omitempty"`
}

func (x *MediaItemSocials) Reset() {
	*x = MediaItemSocials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaItemSocials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaItemSocials) ProtoMessage() {}

func (x *MediaItemSocials) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaItemSocials.ProtoReflect.Descriptor instead.
func (*MediaItemSocials) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{8}
}

func (x *MediaItemSocials) GetLikes() uint64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *MediaItemSocials) GetLastLike() *TimestampUnix {
	if x != nil {
		return x.LastLike
	}
	return nil
}

func (x *MediaItemSocials) GetComments() uint64 {
	if x != nil {
		return x.Comments
	}
	return 0
}

func (x *MediaItemSocials) GetLastComment() *TimestampUnix {
	if x != nil {
		return x.LastComment
	}
	return nil
}

type CommentDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier of the comment itself
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the media id the comment is about
	MediaId string `protobuf:"bytes,2,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	// the id of the user which creates the comment
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the text of the comment
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// the timestamp the comment was created
	CreatedAt *TimestampUnix `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
}

func (x *CommentDetails) Reset() {
	*x = CommentDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentDetails) ProtoMessage() {}

func (x *CommentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentDetails.ProtoReflect.Descriptor instead.
func (*CommentDetails) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{9}
}

func (x *CommentDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommentDetails) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CommentDetails) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommentDetails) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CommentDetails) GetCreatedAt() *TimestampUnix {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type LikeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier of the like itself
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the media id the like is for
	MediaId string `protobuf:"bytes,2,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	// the id of the user which added the like to media content
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the timestamp the like was given
	CreatedAt *TimestampUnix `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
}

func (x *LikeDetails) Reset() {
	*x = LikeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeDetails) ProtoMessage() {}

func (x *LikeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_src_contracts_media_content_media_content_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeDetails.ProtoReflect.Descriptor instead.
func (*LikeDetails) Descriptor() ([]byte, []int) {
	return file_src_contracts_media_content_media_content_query_proto_rawDescGZIP(), []int{10}
}

func (x *LikeDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LikeDetails) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *LikeDetails) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LikeDetails) GetCreatedAt() *TimestampUnix {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_src_contracts_media_content_media_content_query_proto protoreflect.FileDescriptor

var file_src_contracts_media_content_media_content_query_proto_rawDesc = []byte{
	0x0a, 0x35, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x1a, 0x36, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x80, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x22, 0x5e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22,
	0xc7, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x37, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x48, 0x01, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x04, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xf1, 0x01, 0x0a, 0x0d,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3d, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x48, 0x0a, 0x07,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22,
	0xb6, 0x04, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x48, 0x01, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x48, 0x00,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xac,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x2a, 0x46, 0x0a,
	0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x02, 0x32, 0xb4, 0x04, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x0a, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x55, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x1a, 0x24, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x29, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x51, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x30, 0x01, 0x42, 0x1e, 0x5a, 0x1c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_contracts_media_content_media_content_query_proto_rawDescOnce sync.Once
	file_src_contracts_media_content_media_content_query_proto_rawDescData = file_src_contracts_media_content_media_content_query_proto_rawDesc
)

func file_src_contracts_media_content_media_content_query_proto_rawDescGZIP() []byte {
	file_src_contracts_media_content_media_content_query_proto_rawDescOnce.Do(func() {
		file_src_contracts_media_content_media_content_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_contracts_media_content_media_content_query_proto_rawDescData)
	})
	return file_src_contracts_media_content_media_content_query_proto_rawDescData
}

var file_src_contracts_media_content_media_content_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_src_contracts_media_content_media_content_query_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_src_contracts_media_content_media_content_query_proto_goTypes = []interface{}{
	(MediaItemKind)(0),          // 0: contracts.media_content.MediaItemKind
	(*Paging)(nil),              // 1: contracts.media_content.Paging
	(*AnchorInfo)(nil),          // 2: contracts.media_content.AnchorInfo
	(*ListCommentsRequest)(nil), // 3: contracts.media_content.ListCommentsRequest
	(*ListLikesRequest)(nil),    // 4: contracts.media_content.ListLikesRequest
	(*ListMediaRequest)(nil),    // 5: contracts.media_content.ListMediaRequest
	(*ContentQuery)(nil),        // 6: contracts.media_content.ContentQuery
	(*MediaListItem)(nil),       // 7: contracts.media_content.MediaListItem
	(*MediaItemDetails)(nil),    // 8: contracts.media_content.MediaItemDetails
	(*MediaItemSocials)(nil),    // 9: contracts.media_content.MediaItemSocials
	(*CommentDetails)(nil),      // 10: contracts.media_content.CommentDetails
	(*LikeDetails)(nil),         // 11: contracts.media_content.LikeDetails
	(*TimestampUnix)(nil),       // 12: contracts.media_content.TimestampUnix
	(ItemVisibility)(0),         // 13: contracts.media_content.ItemVisibility
	(*Id)(nil),                  // 14: contracts.media_content.Id
}
var file_src_contracts_media_content_media_content_query_proto_depIdxs = []int32{
	1,  // 0: contracts.media_content.ListCommentsRequest.Paging:type_name -> contracts.media_content.Paging
	1,  // 1: contracts.media_content.ListLikesRequest.Paging:type_name -> contracts.media_content.Paging
	6,  // 2: contracts.media_content.ListMediaRequest.Query:type_name -> contracts.media_content.ContentQuery
	1,  // 3: contracts.media_content.ListMediaRequest.Paging:type_name -> contracts.media_content.Paging
	12, // 4: contracts.media_content.ContentQuery.end_date:type_name -> contracts.media_content.TimestampUnix
	12, // 5: contracts.media_content.ContentQuery.search_term:type_name -> contracts.media_content.TimestampUnix
	13, // 6: contracts.media_content.ContentQuery.visibility:type_name -> contracts.media_content.ItemVisibility
	8,  // 7: contracts.media_content.MediaListItem.item:type_name -> contracts.media_content.MediaItemDetails
	9,  // 8: contracts.media_content.MediaListItem.socials:type_name -> contracts.media_content.MediaItemSocials
	2,  // 9: contracts.media_content.MediaListItem.anchor:type_name -> contracts.media_content.AnchorInfo
	0,  // 10: contracts.media_content.MediaItemDetails.kind:type_name -> contracts.media_content.MediaItemKind
	12, // 11: contracts.media_content.MediaItemDetails.uploaded_at:type_name -> contracts.media_content.TimestampUnix
	12, // 12: contracts.media_content.MediaItemDetails.last_modified_at:type_name -> contracts.media_content.TimestampUnix
	13, // 13: contracts.media_content.MediaItemDetails.visibility:type_name -> contracts.media_content.ItemVisibility
	12, // 14: contracts.media_content.MediaItemSocials.last_like:type_name -> contracts.media_content.TimestampUnix
	12, // 15: contracts.media_content.MediaItemSocials.last_comment:type_name -> contracts.media_content.TimestampUnix
	12, // 16: contracts.media_content.CommentDetails.created_at:type_name -> contracts.media_content.TimestampUnix
	12, // 17: contracts.media_content.LikeDetails.created_at:type_name -> contracts.media_content.TimestampUnix
	5,  // 18: contracts.media_content.QueryMediaContent.MediaItems:input_type -> contracts.media_content.ListMediaRequest
	14, // 19: contracts.media_content.QueryMediaContent.MediaItem:input_type -> contracts.media_content.Id
	14, // 20: contracts.media_content.QueryMediaContent.Like:input_type -> contracts.media_content.Id
	4,  // 21: contracts.media_content.QueryMediaContent.Likes:input_type -> contracts.media_content.ListLikesRequest
	14, // 22: contracts.media_content.QueryMediaContent.Comment:input_type -> contracts.media_content.Id
	3,  // 23: contracts.media_content.QueryMediaContent.Comments:input_type -> contracts.media_content.ListCommentsRequest
	7,  // 24: contracts.media_content.QueryMediaContent.MediaItems:output_type -> contracts.media_content.MediaListItem
	8,  // 25: contracts.media_content.QueryMediaContent.MediaItem:output_type -> contracts.media_content.MediaItemDetails
	11, // 26: contracts.media_content.QueryMediaContent.Like:output_type -> contracts.media_content.LikeDetails
	11, // 27: contracts.media_content.QueryMediaContent.Likes:output_type -> contracts.media_content.LikeDetails
	10, // 28: contracts.media_content.QueryMediaContent.Comment:output_type -> contracts.media_content.CommentDetails
	10, // 29: contracts.media_content.QueryMediaContent.Comments:output_type -> contracts.media_content.CommentDetails
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_src_contracts_media_content_media_content_query_proto_init() }
func file_src_contracts_media_content_media_content_query_proto_init() {
	if File_src_contracts_media_content_media_content_query_proto != nil {
		return
	}
	file_src_contracts_media_content_media_content_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_src_contracts_media_content_media_content_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLikesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaItemDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaItemSocials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_contracts_media_content_media_content_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_contracts_media_content_media_content_query_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_src_contracts_media_content_media_content_query_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_src_contracts_media_content_media_content_query_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_src_contracts_media_content_media_content_query_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_src_contracts_media_content_media_content_query_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_src_contracts_media_content_media_content_query_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_src_contracts_media_content_media_content_query_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_src_contracts_media_content_media_content_query_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_contracts_media_content_media_content_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_contracts_media_content_media_content_query_proto_goTypes,
		DependencyIndexes: file_src_contracts_media_content_media_content_query_proto_depIdxs,
		EnumInfos:         file_src_contracts_media_content_media_content_query_proto_enumTypes,
		MessageInfos:      file_src_contracts_media_content_media_content_query_proto_msgTypes,
	}.Build()
	File_src_contracts_media_content_media_content_query_proto = out.File
	file_src_contracts_media_content_media_content_query_proto_rawDesc = nil
	file_src_contracts_media_content_media_content_query_proto_goTypes = nil
	file_src_contracts_media_content_media_content_query_proto_depIdxs = nil
}
