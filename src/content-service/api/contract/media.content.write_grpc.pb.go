// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: src/contracts/media-content/media.content.write.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModifyMediaContentClient is the client API for ModifyMediaContent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModifyMediaContentClient interface {
	// UploadLink allows to request a temporary direct upload link for a media content
	GeneratePreSignedUrl(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PreSignedUrl, error)
	// AddOrUpdateMediaItem allows to either add a new item or modify an existing item
	AddOrUpdateMediaItem(ctx context.Context, in *WriteMediaItem, opts ...grpc.CallOption) (*Id, error)
	// AddLike allows to either add a like or a dislike to a concrete media item
	AddLike(ctx context.Context, in *WriteLike, opts ...grpc.CallOption) (*Id, error)
	// AddComment allows to add a comment to a concrete media item
	AddComment(ctx context.Context, in *WriteComment, opts ...grpc.CallOption) (*Id, error)
	// DeleteMediaItem allows to remove a media item
	DeleteMediaItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	// DeleteLike allows to remove an given like
	DeleteLike(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	// DeleteComment allows to remove a comment
	DeleteComment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
}

type modifyMediaContentClient struct {
	cc grpc.ClientConnInterface
}

func NewModifyMediaContentClient(cc grpc.ClientConnInterface) ModifyMediaContentClient {
	return &modifyMediaContentClient{cc}
}

func (c *modifyMediaContentClient) GeneratePreSignedUrl(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PreSignedUrl, error) {
	out := new(PreSignedUrl)
	err := c.cc.Invoke(ctx, "/contracts.media_content.ModifyMediaContent/GeneratePreSignedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modifyMediaContentClient) AddOrUpdateMediaItem(ctx context.Context, in *WriteMediaItem, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/contracts.media_content.ModifyMediaContent/AddOrUpdateMediaItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modifyMediaContentClient) AddLike(ctx context.Context, in *WriteLike, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/contracts.media_content.ModifyMediaContent/AddLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modifyMediaContentClient) AddComment(ctx context.Context, in *WriteComment, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/contracts.media_content.ModifyMediaContent/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modifyMediaContentClient) DeleteMediaItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/contracts.media_content.ModifyMediaContent/DeleteMediaItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modifyMediaContentClient) DeleteLike(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/contracts.media_content.ModifyMediaContent/DeleteLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modifyMediaContentClient) DeleteComment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/contracts.media_content.ModifyMediaContent/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModifyMediaContentServer is the server API for ModifyMediaContent service.
// All implementations must embed UnimplementedModifyMediaContentServer
// for forward compatibility
type ModifyMediaContentServer interface {
	// UploadLink allows to request a temporary direct upload link for a media content
	GeneratePreSignedUrl(context.Context, *Id) (*PreSignedUrl, error)
	// AddOrUpdateMediaItem allows to either add a new item or modify an existing item
	AddOrUpdateMediaItem(context.Context, *WriteMediaItem) (*Id, error)
	// AddLike allows to either add a like or a dislike to a concrete media item
	AddLike(context.Context, *WriteLike) (*Id, error)
	// AddComment allows to add a comment to a concrete media item
	AddComment(context.Context, *WriteComment) (*Id, error)
	// DeleteMediaItem allows to remove a media item
	DeleteMediaItem(context.Context, *Id) (*Id, error)
	// DeleteLike allows to remove an given like
	DeleteLike(context.Context, *Id) (*Id, error)
	// DeleteComment allows to remove a comment
	DeleteComment(context.Context, *Id) (*Id, error)
	mustEmbedUnimplementedModifyMediaContentServer()
}

// UnimplementedModifyMediaContentServer must be embedded to have forward compatible implementations.
type UnimplementedModifyMediaContentServer struct {
}

func (UnimplementedModifyMediaContentServer) GeneratePreSignedUrl(context.Context, *Id) (*PreSignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePreSignedUrl not implemented")
}
func (UnimplementedModifyMediaContentServer) AddOrUpdateMediaItem(context.Context, *WriteMediaItem) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateMediaItem not implemented")
}
func (UnimplementedModifyMediaContentServer) AddLike(context.Context, *WriteLike) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedModifyMediaContentServer) AddComment(context.Context, *WriteComment) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedModifyMediaContentServer) DeleteMediaItem(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMediaItem not implemented")
}
func (UnimplementedModifyMediaContentServer) DeleteLike(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedModifyMediaContentServer) DeleteComment(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedModifyMediaContentServer) mustEmbedUnimplementedModifyMediaContentServer() {}

// UnsafeModifyMediaContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModifyMediaContentServer will
// result in compilation errors.
type UnsafeModifyMediaContentServer interface {
	mustEmbedUnimplementedModifyMediaContentServer()
}

func RegisterModifyMediaContentServer(s grpc.ServiceRegistrar, srv ModifyMediaContentServer) {
	s.RegisterService(&ModifyMediaContent_ServiceDesc, srv)
}

func _ModifyMediaContent_GeneratePreSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyMediaContentServer).GeneratePreSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.ModifyMediaContent/GeneratePreSignedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyMediaContentServer).GeneratePreSignedUrl(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModifyMediaContent_AddOrUpdateMediaItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMediaItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyMediaContentServer).AddOrUpdateMediaItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.ModifyMediaContent/AddOrUpdateMediaItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyMediaContentServer).AddOrUpdateMediaItem(ctx, req.(*WriteMediaItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModifyMediaContent_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteLike)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyMediaContentServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.ModifyMediaContent/AddLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyMediaContentServer).AddLike(ctx, req.(*WriteLike))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModifyMediaContent_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyMediaContentServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.ModifyMediaContent/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyMediaContentServer).AddComment(ctx, req.(*WriteComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModifyMediaContent_DeleteMediaItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyMediaContentServer).DeleteMediaItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.ModifyMediaContent/DeleteMediaItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyMediaContentServer).DeleteMediaItem(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModifyMediaContent_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyMediaContentServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.ModifyMediaContent/DeleteLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyMediaContentServer).DeleteLike(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModifyMediaContent_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModifyMediaContentServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contracts.media_content.ModifyMediaContent/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModifyMediaContentServer).DeleteComment(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ModifyMediaContent_ServiceDesc is the grpc.ServiceDesc for ModifyMediaContent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModifyMediaContent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contracts.media_content.ModifyMediaContent",
	HandlerType: (*ModifyMediaContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePreSignedUrl",
			Handler:    _ModifyMediaContent_GeneratePreSignedUrl_Handler,
		},
		{
			MethodName: "AddOrUpdateMediaItem",
			Handler:    _ModifyMediaContent_AddOrUpdateMediaItem_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _ModifyMediaContent_AddLike_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _ModifyMediaContent_AddComment_Handler,
		},
		{
			MethodName: "DeleteMediaItem",
			Handler:    _ModifyMediaContent_DeleteMediaItem_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _ModifyMediaContent_DeleteLike_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _ModifyMediaContent_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/contracts/media-content/media.content.write.proto",
}
