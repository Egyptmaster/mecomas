// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: src/contracts/feed-content/feed.content.query.proto

package feed_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FeedContent_Feed_FullMethodName = "/contracts.feed_content.FeedContent/Feed"
)

// FeedContentClient is the client API for FeedContent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedContentClient interface {
	// Feed returns the feed for the specific user ordered by their upload time
	Feed(ctx context.Context, in *FeedContentRequest, opts ...grpc.CallOption) (*FeedContentResponse, error)
}

type feedContentClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedContentClient(cc grpc.ClientConnInterface) FeedContentClient {
	return &feedContentClient{cc}
}

func (c *feedContentClient) Feed(ctx context.Context, in *FeedContentRequest, opts ...grpc.CallOption) (*FeedContentResponse, error) {
	out := new(FeedContentResponse)
	err := c.cc.Invoke(ctx, FeedContent_Feed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedContentServer is the server API for FeedContent service.
// All implementations must embed UnimplementedFeedContentServer
// for forward compatibility
type FeedContentServer interface {
	// Feed returns the feed for the specific user ordered by their upload time
	Feed(context.Context, *FeedContentRequest) (*FeedContentResponse, error)
	mustEmbedUnimplementedFeedContentServer()
}

// UnimplementedFeedContentServer must be embedded to have forward compatible implementations.
type UnimplementedFeedContentServer struct {
}

func (UnimplementedFeedContentServer) Feed(context.Context, *FeedContentRequest) (*FeedContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedFeedContentServer) mustEmbedUnimplementedFeedContentServer() {}

// UnsafeFeedContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedContentServer will
// result in compilation errors.
type UnsafeFeedContentServer interface {
	mustEmbedUnimplementedFeedContentServer()
}

func RegisterFeedContentServer(s grpc.ServiceRegistrar, srv FeedContentServer) {
	s.RegisterService(&FeedContent_ServiceDesc, srv)
}

func _FeedContent_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedContentServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedContent_Feed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedContentServer).Feed(ctx, req.(*FeedContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedContent_ServiceDesc is the grpc.ServiceDesc for FeedContent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedContent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contracts.feed_content.FeedContent",
	HandlerType: (*FeedContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _FeedContent_Feed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/contracts/feed-content/feed.content.query.proto",
}
